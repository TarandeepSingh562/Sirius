/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * user guide available at https://docs.gradle.org/4.8.1/userguide/java_library_plugin.html
 */

// -- Frontend

plugins {
    // Apply the java-library plugin to add support for Java Library
    id 'java-library'
    id 'antlr'
}


dependencies {
    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'org.apache.commons:commons-math3:3.6.1'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:23.0'

	// https://mvnrepository.com/artifact/org.ow2.asm/asm
	compile group: 'org.ow2.asm', name: 'asm', version: '7.1'


    // Use TestNG test framework
//    testCompile 'org.testng:testng:6.14.3'
	compile group: 'org.testng', name: 'testng', version: '6.14.3'
//    testImplementation 'org.testng:testng:6.14.3'
    
//    antlr "org.antlr:antlr4:4.7.2" // use ANTLR version 4
    antlr "org.antlr:antlr4:4.8.1" // use ANTLR version 4
    
    
//    compile project (':parent:org.sirius.common')
    compile project (':org.sirius.common')

    //compile "org.springframework.boot:spring-boot-starter-web:$springBootVersion"
}
// In this section you declare where to find the dependencies of your project
repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

test {
	useTestNG {}
}

//final GENERATED_MAIN = "$buildDir/generated-source/antlr/org/sirius/frontend/parser"
final GENERATED_MAIN = "$buildDir/generated-source/antlr"

sourceSets {
    main {
         java {
            srcDirs = ['src/main/java', GENERATED_MAIN]
         }
    }
}

generateGrammarSource {
    maxHeapSize = "64m"
    arguments += ["-visitor", "-long-messages"]
    outputDirectory = file(GENERATED_MAIN + "/org/sirius/frontend/parser")
}


